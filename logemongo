#!/usr/bin/perl

use strict;
use warnings;

use Data::Dumper;
use Getopt::Long qw/:config bundling/;
use IO::Handle ();
use IO::Socket::SSL qw/$SSL_ERROR/;
use Pod::Usage qw/pod2usage/;
use MIME::Base64 qw/encode_base64/;
use YAML qw(Dump Bless);

my %OPTIONS = (
	ssl      => 1,
	host     => '10.244.73.2',
	port     => 443,
	username => 'admin',
	password => 'admin',
	include  => [],
	exclude  => [],
	filter   => [],
	debug    => 0,
	count    => 0,
	detail => 0,
);

GetOptions(\%OPTIONS, qw/
	ssl!
	help|h
	host|H=s
	port|P=i
	username|user|u=s
	password|pass|p=s
	include|i=s@
	exclude|x=s@
	filters|filter=s%
	debug|D!
	count|c=i
	detail!
/) or pod2usage(2);
pod2usage(1) if $OPTIONS{help};

sub DEBUG {
	$OPTIONS{debug} ? print "[DEBUG] @_\n" : print "";
	return;
}

# compile all the regexen for SPEED!
my @INCLUDES = map { qr/$_/ } @{$OPTIONS{include}};
my @EXCLUDES = map { qr/$_/ } @{$OPTIONS{exclude}};

my $URL = "https://$OPTIONS{host}:$OPTIONS{port}/ws";

print "Targeting sawmill at '$URL'.\n\nDepending on your configuration it may take a moment for log\nmessages to appear. Please be patient.\n\n";

my $fd = IO::Socket::SSL->new(
	PeerHost => $OPTIONS{host},
	PeerPort => $OPTIONS{port},
	($OPTIONS{ssl} ? () : (SSL_verify_callback => sub { 1 })),
) or die "error=$!, ssl_error=$SSL_ERROR";
$fd->blocking(0); # make it O_NONBLOCK

my $creds = encode_base64("$OPTIONS{username}:$OPTIONS{password}");

print $fd <<EOF;
GET /ws HTTP/1.1
Host: $OPTIONS{host}
User-Agent: qgj-web/1.0
Accept: */*
Authorization: Basic $creds

EOF

DEBUG "Sent GET request to $OPTIONS{host}";

my $streaming = undef;
my $counter = 1;
message:
while ($OPTIONS{count} ? $counter <= $OPTIONS{count} : 1) {
	my ($n, $buf);
	$n = sysread($fd, $buf, 8192);
	if (defined $n) {
		again:
		if (!$streaming) {
			# grab the HTTP response code from the first message.
			if ($buf =~ m{HTTP/(.*) (\d{3})}) {
				DEBUG "Received response from $OPTIONS{host}:\n$buf\n";
				my $status = $2;
				if ($status != 200) {
					print $buf;
					die "bad response from $OPTIONS{host}:$OPTIONS{port}\n";
				}
				$buf =~ s/.*\r\n\r\n//s;
				$streaming = 1;
				goto again;

			} else {
				print $buf;
				die "bad response from $OPTIONS{host}:$OPTIONS{port}\n";
			}
		}
		my ($len, $msg) = split "\r\n", $buf;

		my ($logdata, $payload, %msghash);
		if ($msg =~ m/(\[NXLOG@\d+(.*)\]) (.*)/) {
			$logdata = $2;
			$payload = $3;
		}
		my @time_uuid = split ' ', $msg;
		($msghash{'timestamp'}, $msghash{'uuid'}) =  ($time_uuid[0], $time_uuid[1]);
		my $qr = qr/\s*([^=,\s]+)\s*=\s*(?:"((?:[^"]|"")*)"|([^,"]*))\s*,?/;
		while ($logdata =~ m/$qr/) {
			$msghash{$1}=$2;
			$logdata =~ s/$qr//;
		}
		$msghash{'payload'} = $payload;

		if (@INCLUDES) {
			for my $re (@INCLUDES) {
				goto g2g if $payload =~ $re;
			}
			next message;
		}
		if (@EXCLUDES) {
			for my $re (@EXCLUDES) {
				goto g2g if $payload !~ $re;
			}
			next message;
		}
		if ($OPTIONS{filters}) {
			while (my ($key, $val) = each %{$OPTIONS{filters}}) {
				goto g2g if $OPTIONS{filters}{$key} eq $msghash{$key};
			}
			next message;
		}
	g2g:
		$OPTIONS{detail} ? print Dump(\%msghash), "\n" : print "$msg\n";
		$counter++;

	} elsif ($!{EAGAIN}) {
		sleep 1;
		next;

	} else {
		die "ERROR\n";
	}
}

=head1 NAME

logemongo - A Sawmill Client

=head1 SYNOPSIS

logemongo -H C<host> -P C<port> -u C<user> -p C<password>

=head1 OPTIONS

C<logemongo> understands the following options:

=over

=item B<-H>, B<--host> I<NAME>

The hostname or IP address of the Sawmill endpoint to connect to.
This defaults to 10.244.73.2, which is only valid in BOSH-lite
deployments, usually.

=item B<-P>, B<--port> I<PORT>

The TCP port to connect to Sawmill on.  Defaults to 443, which
should be sufficient for most deployment scenarios.

=item B<-u>, B<--user> I<NAME>

The username to connect to Sawmill as.  Defaults to C<admin>, which
hopefully doesn't actually work in your production deployments.

=item B<-p>, B<--pass> I<NAME>

The password to connect to Sawmill as.  Defaults to C<admin>, which
hopefully doesn't actually work in your production deployments.

=item B<--[no-]ssl>

Enable (disable) SSL certificate verification.  The BOSH-lite
deployment utilizes self-signed certificates, so you may need
C<--no-ssl> to access it.  You are strongly encouraged to use
real, verifiable certificates in production environments.

=item B<-c>, B<--count> I<VALUE>

Limits the number of log messages returned to the value provided.
If no value is provided, messages are streamed until the user
exits.

=item B<-i>, B<--include> I<REGEX>

Returns only messages that match the provided pattern. If no pattern
is provided, all messages are returned.

=item B<-x>, B<--exclude> I<REGEX>

Returns only messages that do not match the provided pattern. If no pattern
is provided, all messages are returned.

=item B<-D>, B<--debug>

Prints additional debugging information to assist with troubleshooting
in the event logemongo is not receiving messages from a Sawmill for
whatever reason.

=head1 AUTHOR

Written by James Hunt B<jhunt@starkandwayne.com>
and Quintessence <quinn@starkandwayne.com>, after much wailing
and gnashing of teeth.

=back
